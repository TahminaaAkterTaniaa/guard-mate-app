generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String       @id @default(cuid())
  name        String
  description String?
  logoUrl     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deployments Deployment[]
  guards      Guard[]
  managers    Manager[]
  sites       Site[]
}

model Guard {
  id                String       @id @default(cuid())
  companyId         String
  email             String       @unique
  phone             String       @unique
  password          String
  name              String
  profilePictureUrl String?
  status            String       @default("ACTIVE")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  checkIns          CheckIn[]
  deployments       Deployment[]
  company           Company      @relation(fields: [companyId], references: [id])
  incidents         Incident[]
  leaves            Leave[]
}

model Manager {
  id                String     @id @default(cuid())
  companyId         String
  email             String     @unique
  phone             String
  password          String
  name              String
  profilePictureUrl String?
  role              String     @default("MANAGER")
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  approvedIncidents Incident[]
  approvedLeaves    Leave[]
  company           Company    @relation(fields: [companyId], references: [id])
  managedSites      Site[]
}

model Site {
  id          String       @id @default(cuid())
  companyId   String
  name        String
  address     String
  latitude    Float?
  longitude   Float?
  qrCodeUrl   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  managerId   String?
  checkIns    CheckIn[]
  deployments Deployment[]
  manager     Manager?     @relation(fields: [managerId], references: [id])
  company     Company      @relation(fields: [companyId], references: [id])
}

model Deployment {
  id        String   @id @default(cuid())
  companyId String
  guardId   String
  siteId    String
  startDate DateTime
  endDate   DateTime
  status    String   @default("SCHEDULED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  site      Site     @relation(fields: [siteId], references: [id])
  guard     Guard    @relation(fields: [guardId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
}

model CheckIn {
  id             String    @id @default(cuid())
  guardId        String
  siteId         String
  checkInTime    DateTime  @default(now())
  checkOutTime   DateTime?
  status         String    @default("CHECKED_IN")
  faceMatchScore Float?
  latitude       Float?
  longitude      Float?
  qrCodeVerified Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  site           Site      @relation(fields: [siteId], references: [id])
  guard          Guard     @relation(fields: [guardId], references: [id])
}

model Incident {
  id          String   @id @default(cuid())
  guardId     String
  title       String
  description String
  severity    String   @default("LOW")
  status      String   @default("REPORTED")
  imageUrls   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  managerId   String?
  approvedBy  Manager? @relation(fields: [managerId], references: [id])
  guard       Guard    @relation(fields: [guardId], references: [id])
}

model Leave {
  id          String   @id @default(cuid())
  guardId     String
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      String   @default("PENDING")
  documentUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  managerId   String?
  approvedBy  Manager? @relation(fields: [managerId], references: [id])
  guard       Guard    @relation(fields: [guardId], references: [id])
}
