// GuardMate Database Schema - Prisma Schema
// Multi-tenant SaaS architecture with company isolation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================
// COMPANY & TENANT MANAGEMENT
// ============================================

model Company {
  id               String   @id @default(cuid())
  name             String
  registrationNo   String?
  businessLicense  String?
  phoneNumber      String
  email            String   @unique
  address          String?
  city             String?
  country          String   @default("Bangladesh")
  
  // Subscription & Billing
  subscriptionTier String   @default("starter") // starter, professional, enterprise
  maxGuards        Int      @default(10)
  maxManagers      Int      @default(2)
  isActive         Boolean  @default(true)
  trialEndDate     DateTime?
  
  // Billing Information
  billingEmail     String?
  billingAddress   String?
  paymentStatus    String   @default("active") // active, overdue, suspended
  nextBillingDate  DateTime?
  
  // Metadata
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  users            User[]
  locations        Location[]
  shifts           Shift[]
  deployments      Deployment[]
  incidents        Incident[]
  leaveRequests    LeaveRequest[]
  invoices         Invoice[]
  expenses         Expense[]
  trainings        Training[]
  communications   Communication[]
  
  @@map("companies")
}

// ============================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================

model User {
  id                String   @id @default(cuid())
  companyId         String
  
  // Basic Information
  firstName         String
  lastName          String
  email             String   @unique
  phoneNumber       String   @unique
  employeeId        String?
  
  // Authentication
  password          String?
  invitationCode    String?
  emailVerified     DateTime?
  phoneVerified     DateTime?
  
  // Profile
  role              UserRole @default(GUARD)
  avatar            String?
  dateOfBirth       DateTime?
  address           String?
  emergencyContact  String?
  emergencyPhone    String?
  
  // Guard Specific
  skills            String[] // JSON array of skills
  certifications    String[] // JSON array of certifications
  hourlyRate        Float?
  isAvailable       Boolean  @default(true)
  
  // Biometric Data
  faceEncodingData  String?  // Encrypted facial recognition data
  
  // Status & Metadata
  status            UserStatus @default(ACTIVE)
  lastActiveAt      DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  company           Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  deployments       Deployment[]
  attendances       Attendance[]
  incidents         Incident[]
  leaveRequests     LeaveRequest[]
  expenses          Expense[]
  payrolls          Payroll[]
  trainings         UserTraining[]
  sentMessages      Communication[] @relation("MessageSender")
  receivedMessages  Communication[] @relation("MessageReceiver")
  performanceReviews PerformanceReview[]
  
  @@unique([companyId, employeeId])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// ============================================
// LOCATION & SITE MANAGEMENT
// ============================================

model Location {
  id            String   @id @default(cuid())
  companyId     String
  
  // Basic Information
  name          String
  address       String
  city          String
  coordinates   Json?    // {lat: number, lng: number}
  
  // Site Details
  clientName    String?
  contactPerson String?
  contactPhone  String?
  siteCode      String   @unique
  
  // QR Code & Security
  qrCode        String?  // Generated QR code for check-ins
  qrCodeExpiry  DateTime?
  gpsRadius     Int      @default(100) // meters
  
  // Site Instructions
  instructions  String?
  emergencyProcedure String?
  equipmentList String?
  
  // Status
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  shifts        Shift[]
  deployments   Deployment[]
  incidents     Incident[]
  attendances   Attendance[]
  
  @@map("locations")
}

// ============================================
// SHIFT & DEPLOYMENT MANAGEMENT
// ============================================

model Shift {
  id            String   @id @default(cuid())
  companyId     String
  locationId    String
  
  // Shift Details
  name          String
  startTime     String   // HH:MM format
  endTime       String   // HH:MM format
  duration      Int      // minutes
  
  // Requirements
  requiredGuards Int     @default(1)
  requiredSkills String[] // JSON array
  
  // Shift Pattern
  isRecurring   Boolean  @default(false)
  daysOfWeek    String[] // ["monday", "tuesday", ...]
  
  // Rates
  baseRate      Float?
  overtimeRate  Float?
  nightRate     Float?
  
  // Status
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location      Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  deployments   Deployment[]
  
  @@map("shifts")
}

model Deployment {
  id            String   @id @default(cuid())
  companyId     String
  shiftId       String
  userId        String
  
  // Deployment Details
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  status        DeploymentStatus @default(SCHEDULED)
  
  // Assignment Details
  assignedBy    String?  // User ID of manager who assigned
  assignedAt    DateTime @default(now())
  
  // Notes & Instructions
  notes         String?
  specialInstructions String?
  
  // Status Tracking
  confirmedAt   DateTime?
  completedAt   DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  shift         Shift @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendances   Attendance[]
  
  @@unique([shiftId, date, userId])
  @@map("deployments")
}

// ============================================
// ATTENDANCE & CHECK-IN SYSTEM
// ============================================

model Attendance {
  id                String   @id @default(cuid())
  companyId         String
  userId            String
  deploymentId      String
  locationId        String
  
  // Check-in Details
  checkInTime       DateTime
  checkInCoordinates Json?   // GPS coordinates
  checkInMethod     CheckInMethod
  checkInPhoto      String? // Facial recognition photo path
  
  // Check-out Details
  checkOutTime      DateTime?
  checkOutCoordinates Json?
  checkOutMethod    CheckInMethod?
  checkOutPhoto     String?
  
  // Validation
  isGpsValid        Boolean  @default(false)
  isQrValid         Boolean  @default(false)
  isFaceValid       Boolean  @default(false)
  
  // Override & Approval
  requiresApproval  Boolean  @default(false)
  approvedBy        String?
  approvedAt        DateTime?
  overrideReason    String?
  
  // Calculated Fields
  hoursWorked       Float?   // Calculated hours
  overtimeHours     Float?
  
  // Status
  status            AttendanceStatus @default(CHECKED_IN)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  company           Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  deployment        Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  location          Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  
  @@map("attendances")
}

// ============================================
// INCIDENT MANAGEMENT
// ============================================

model Incident {
  id              String   @id @default(cuid())
  companyId       String
  locationId      String
  reportedBy      String   // User ID
  
  // Incident Details
  title           String
  description     String
  incidentType    IncidentType
  severity        IncidentSeverity
  
  // Location & Time
  coordinates     Json?    // GPS coordinates where incident occurred
  occurredAt      DateTime
  reportedAt      DateTime @default(now())
  
  // Evidence
  photos          String[] // Array of photo URLs
  videos          String[] // Array of video URLs
  audioNotes      String?
  
  // Witnesses
  witnesses       Json?    // Array of witness information
  
  // Status & Resolution
  status          IncidentStatus @default(OPEN)
  priority        String   @default("medium")
  assignedTo      String?  // Manager ID
  resolvedAt      DateTime?
  resolution      String?
  
  // Client Notification
  clientNotified  Boolean  @default(false)
  clientNotifiedAt DateTime?
  
  // Follow-up
  followUpRequired Boolean @default(false)
  followUpDate    DateTime?
  followUpNotes   String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location        Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  reporter        User @relation(fields: [reportedBy], references: [id])
  
  @@map("incidents")
}

// ============================================
// LEAVE MANAGEMENT
// ============================================

model LeaveRequest {
  id              String   @id @default(cuid())
  companyId       String
  userId          String
  
  // Leave Details
  leaveType       LeaveType
  startDate       DateTime
  endDate         DateTime
  totalDays       Int
  
  // Application Details
  reason          String
  documents       String[] // Supporting documents URLs
  emergencyContact String?
  
  // Approval Workflow
  status          LeaveStatus @default(PENDING)
  appliedAt       DateTime @default(now())
  reviewedBy      String?  // Manager ID
  reviewedAt      DateTime?
  reviewComments  String?
  
  // Impact Assessment
  affectedShifts  Json?    // Array of affected deployment IDs
  replacementArranged Boolean @default(false)
  replacementUserId String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("leave_requests")
}

// ============================================
// FINANCIAL MANAGEMENT
// ============================================

model Payroll {
  id              String   @id @default(cuid())
  companyId       String
  userId          String
  
  // Payroll Period
  periodStart     DateTime
  periodEnd       DateTime
  payDate         DateTime
  
  // Hours & Earnings
  regularHours    Float
  overtimeHours   Float
  nightHours      Float
  
  regularEarnings Float
  overtimeEarnings Float
  nightEarnings   Float
  bonusEarnings   Float    @default(0)
  
  // Deductions
  taxDeduction    Float    @default(0)
  insuranceDeduction Float @default(0)
  otherDeductions Float    @default(0)
  
  // Totals
  grossPay        Float
  netPay          Float
  
  // Status
  status          PayrollStatus @default(DRAFT)
  processedAt     DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payrolls")
}

model Expense {
  id              String   @id @default(cuid())
  companyId       String
  userId          String
  
  // Expense Details
  title           String
  description     String?
  category        ExpenseCategory
  amount          Float
  currency        String   @default("BDT")
  
  // Documentation
  receipt         String?  // Receipt image URL
  invoiceNumber   String?
  
  // Date & Location
  expenseDate     DateTime
  location        String?
  
  // Approval
  status          ExpenseStatus @default(PENDING)
  submittedAt     DateTime @default(now())
  reviewedBy      String?
  reviewedAt      DateTime?
  approvedAmount  Float?
  rejectReason    String?
  
  // Reimbursement
  reimbursedAt    DateTime?
  reimbursementMethod String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("expenses")
}

model Invoice {
  id              String   @id @default(cuid())
  companyId       String
  
  // Invoice Details
  invoiceNumber   String   @unique
  billingPeriodStart DateTime
  billingPeriodEnd DateTime
  dueDate         DateTime
  
  // Amounts
  subtotal        Float
  taxAmount       Float
  totalAmount     Float
  paidAmount      Float    @default(0)
  
  // Status
  status          InvoiceStatus @default(PENDING)
  issuedAt        DateTime @default(now())
  paidAt          DateTime?
  
  // Payment
  paymentMethod   String?
  transactionId   String?
  
  // Line Items (JSON)
  lineItems       Json     // Array of invoice line items
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("invoices")
}

// ============================================
// TRAINING & LEARNING
// ============================================

model Training {
  id              String   @id @default(cuid())
  companyId       String
  
  // Training Details
  title           String
  description     String
  category        String
  difficulty      String   @default("beginner")
  
  // Content
  contentType     String   // video, document, quiz
  contentUrl      String?
  duration        Int?     // minutes
  
  // Requirements
  isRequired      Boolean  @default(false)
  prerequisites   String[] // Array of training IDs
  
  // Certification
  certificateTemplate String?
  passingScore    Int?     @default(80)
  
  // Status
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userTrainings   UserTraining[]
  
  @@map("trainings")
}

model UserTraining {
  id              String   @id @default(cuid())
  userId          String
  trainingId      String
  
  // Progress
  status          TrainingStatus @default(NOT_STARTED)
  progress        Int      @default(0) // percentage
  score           Int?
  attempts        Int      @default(0)
  
  // Dates
  startedAt       DateTime?
  completedAt     DateTime?
  certificateIssuedAt DateTime?
  expiresAt       DateTime?
  
  // Certificate
  certificateUrl  String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  training        Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  
  @@unique([userId, trainingId])
  @@map("user_trainings")
}

// ============================================
// COMMUNICATION SYSTEM
// ============================================

model Communication {
  id              String   @id @default(cuid())
  companyId       String
  
  // Message Details
  title           String?
  content         String
  messageType     MessageType
  priority        MessagePriority @default(NORMAL)
  
  // Sender/Receiver
  senderId        String
  receiverIds     String[] // Array of user IDs for targeted messages
  
  // Broadcast Settings
  isBroadcast     Boolean  @default(false)
  targetRoles     UserRole[] // For role-based broadcasts
  targetLocations String[] // For location-based broadcasts
  
  // Attachments
  attachments     String[] // URLs to attachments
  
  // Status
  isRead          Boolean  @default(false)
  readAt          DateTime?
  requiresAcknowledgment Boolean @default(false)
  acknowledgedBy  String[] // Array of user IDs who acknowledged
  
  // Scheduling
  scheduledFor    DateTime?
  expiresAt       DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sender          User @relation("MessageSender", fields: [senderId], references: [id])
  receivers       User[] @relation("MessageReceiver")
  
  @@map("communications")
}

// ============================================
// PERFORMANCE & ANALYTICS
// ============================================

model PerformanceReview {
  id              String   @id @default(cuid())
  userId          String
  reviewerId      String
  
  // Review Period
  reviewPeriodStart DateTime
  reviewPeriodEnd DateTime
  
  // Metrics
  attendanceScore Float
  punctualityScore Float
  performanceScore Float
  incidentScore   Float
  clientFeedbackScore Float?
  
  // Overall Rating
  overallRating   Float
  strengths       String?
  improvements    String?
  goals           String?
  
  // Status
  status          String   @default("draft")
  submittedAt     DateTime?
  acknowledgedAt  DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("performance_reviews")
}

// ============================================
// SYSTEM & AUDIT
// ============================================

model AuditLog {
  id              String   @id @default(cuid())
  companyId       String?
  userId          String?
  
  // Action Details
  action          String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  resource        String   // Table/Entity name
  resourceId      String?  // ID of the affected resource
  
  // Change Details
  oldValues       Json?
  newValues       Json?
  
  // Metadata
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime @default(now())
  
  @@map("audit_logs")
}

model SystemConfig {
  id              String   @id @default(cuid())
  key             String   @unique
  value           String
  category        String
  description     String?
  isPublic        Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("system_configs")
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  SUPER_ADMIN
  COMPANY_ADMIN
  MANAGER
  GUARD
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum DeploymentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum CheckInMethod {
  QR_CODE
  GPS_ONLY
  MANUAL_OVERRIDE
  FACIAL_RECOGNITION
}

enum AttendanceStatus {
  CHECKED_IN
  CHECKED_OUT
  INCOMPLETE
  REQUIRES_APPROVAL
}

enum IncidentType {
  SECURITY_BREACH
  SAFETY_HAZARD
  EQUIPMENT_ISSUE
  MEDICAL_EMERGENCY
  THEFT
  VANDALISM
  UNAUTHORIZED_ACCESS
  FIRE_EMERGENCY
  OTHER
}

enum IncidentSeverity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum LeaveType {
  ANNUAL_LEAVE
  MEDICAL_LEAVE
  EMERGENCY_LEAVE
  UNPAID_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum PayrollStatus {
  DRAFT
  APPROVED
  PAID
  CANCELLED
}

enum ExpenseCategory {
  TRAVEL
  MEALS
  ACCOMMODATION
  COMMUNICATION
  MEDICAL
  EQUIPMENT
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum InvoiceStatus {
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum TrainingStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  EXPIRED
  FAILED
}

enum MessageType {
  ANNOUNCEMENT
  ALERT
  REMINDER
  INSTRUCTION
  EMERGENCY
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}